<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>528</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>2.0.3</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>COMMAND_STRING</key>
					<dict/>
					<key>CheckedForUserDefaultShell</key>
					<dict/>
					<key>inputMethod</key>
					<dict/>
					<key>shell</key>
					<dict/>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run Shell Script.action</string>
				<key>ActionName</key>
				<string>Ejecutar el script Shell</string>
				<key>ActionParameters</key>
				<dict>
					<key>COMMAND_STRING</key>
					<string>#!/bin/bash

# Función para verificar si el disco es NTFS
is_ntfs() {
    if diskutil info "$1" | grep -q "Windows_NTFS"; then
        return 0  # Verdadero
    else
        return 1  # Falso
    fi
}

# Función para desmontar y montar el disco
mount_ntfs() {
    DISK_DEVICE="$1"
    
    # Obtener el nombre del disco
    DISK_NAME=$(diskutil info "$DISK_DEVICE" | grep "Volume Name" | awk -F ': ' '{print $2}' | xargs)
    
    # Construir el punto de montaje
    MOUNT_POINT="/Volumes/macFUSE $DISK_NAME"  # Concatenar "macFUSE " con el nombre del disco

    # Verificar si el punto de montaje contiene "macFUSE"
    if diskutil info "$DISK_DEVICE" | grep -q "macFUSE"; then
        echo "El punto de montaje es 'macFUSE', no se montará."
        return
    fi

    echo "Desmontando $DISK_DEVICE..."
    if diskutil unmount "$DISK_DEVICE"; then
        echo "Desmontado correctamente: $DISK_DEVICE"
        notify "Desmontado correctamente: $DISK_DEVICE"  # Notificación de desmontaje
        echo "Montando $DISK_DEVICE en $MOUNT_POINT..."
        
        # Solicitar la contraseña del usuario
        # PASSWORD=$(osascript -e 'Tell application "System Events" to display dialog "Introduce tu contraseña para continuar:" default answer "" with hidden answer' -e 'text returned of result')
        
        # Usar la contraseña para ejecutar el comando ntfs-3g
        echo "$PASSWORD" | sudo -S /opt/local/bin/ntfs-3g -o auto_xattr,big_writes,local,allow_other "$DISK_DEVICE" "$MOUNT_POINT"
        
        if [ $? -eq 0 ]; then
            echo "Disco montado correctamente en $MOUNT_POINT"
            notify "Disco montado correctamente en $MOUNT_POINT"  # Notificación de montaje
        else
            echo "Error al montar el disco: $DISK_DEVICE"
            notify "Error al montar el disco: $DISK_DEVICE"  # Notificación de error
        fi
    else
        echo "Error al desmontar el disco: $DISK_DEVICE"
        notify "Error al desmontar el disco: $DISK_DEVICE"  # Notificación de error
    fi
}

# Monitorear todos los discos conectados
# Listar discos conectados
echo "Buscando discos NTFS conectados..."
diskutil list | while read -r LINE; do
    # Verificar si la línea contiene "Windows_NTFS"
    if echo "$LINE" | grep -q "Windows_NTFS"; then
        # Extraer el identificador del disco
        DISK_IDENTIFIER=$(echo "$LINE" | awk '{print $NF}')  # Obtener el último campo (IDENTIFIER)
        
        # Construir la cadena del dispositivo
        DEVICE_PATH="/dev/$DISK_IDENTIFIER"
        echo "Construyendo la cadena del dispositivo: $DEVICE_PATH"  # Mostrar cómo se arma la cadena
        
        # Verificar si es NTFS
        if is_ntfs "$DEVICE_PATH"; then
            echo "$DISK_IDENTIFIER es NTFS."
            # Llamar a la función para desmontar y montar
            mount_ntfs "$DEVICE_PATH"
        fi
    fi
done</string>
					<key>CheckedForUserDefaultShell</key>
					<true/>
					<key>inputMethod</key>
					<integer>0</integer>
					<key>shell</key>
					<string>/bin/zsh</string>
					<key>source</key>
					<string></string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.RunShellScript</string>
				<key>CFBundleVersion</key>
				<string>2.0.3</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunShellScriptAction</string>
				<key>InputUUID</key>
				<string>BF7FA059-CED6-4D10-BB22-2D6B3DD4B6F5</string>
				<key>Keywords</key>
				<array>
					<string>Shell</string>
					<string>Script</string>
					<string>Comando</string>
					<string>Ejecutar</string>
					<string>Unix</string>
				</array>
				<key>OutputUUID</key>
				<string>636D5690-EF8F-48C0-AAC3-8CE2D478AC37</string>
				<key>UUID</key>
				<string>A985D869-809E-43FF-AFB9-C7F703409588</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<integer>0</integer>
						<key>name</key>
						<string>inputMethod</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
					<key>1</key>
					<dict>
						<key>default value</key>
						<false/>
						<key>name</key>
						<string>CheckedForUserDefaultShell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>1</string>
					</dict>
					<key>2</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>2</string>
					</dict>
					<key>3</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>COMMAND_STRING</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>3</string>
					</dict>
					<key>4</key>
					<dict>
						<key>default value</key>
						<string>/bin/sh</string>
						<key>name</key>
						<string>shell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>4</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>301.500000:717.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run Shell Script.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>folderActionFolderPath</key>
		<string>/Volumes</string>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.folderAction</string>
	</dict>
</dict>
</plist>
